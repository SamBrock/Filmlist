datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String?
  password      String?
  lists         List[]
  watchlist     Watchlist?
  watchedMovies WatchedMovie[]
  ratedMovies   RatedMovie[]
  likedMovies   LikedMovie[]
  createdAt     DateTime       @default(now())
}

model Movie {
  id           Int            @id
  title        String
  backdropPath String
  posterPath   String
  releaseDate  DateTime
  lists        List[]
  watchlists   Watchlist[]
  watchedBy    WatchedMovie[]
  ratedBy      RatedMovie[]
  likedBy      LikedMovie[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model List {
  id        Int      @id @default(autoincrement())
  name      String
  watchlist Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Watchlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  movies    Movie[]
  createdAt DateTime @default(now())
}

model WatchedMovie {
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([movieId, userId])
}

model RatedMovie {
  id        Int      @id @default(autoincrement())
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikedMovie {
  id        Int      @id @default(autoincrement())
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Log {
//   id        Int      @id @default(autoincrement())
//   rating    Int      @default(0)
//   liked     Boolean  @default(false)
//   movie     Movie?   @relation(fields: [movieId], references: [id])
//   movieId   Int?
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
